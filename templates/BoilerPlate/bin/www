#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */
const common = require('../lib/common');
const debug = require('debug')('app:' + common.getFileName(__filename));
const http = require('http');
const prepare = require('../lib/prepare');

/**
 * Get port from environment and store in Express.
 */
let server;
prepare.all().then(config => {
    const app = require('../app');
    const port = normalizePort(process.env.HTTP_PORT || process.env.npm_package_config_port || '3000');
    const ip = process.env.HTTP_IP || process.env.npm_package_config_ip || '127.0.0.1';
    app.set('port', port);
    app.set('ip', ip);

    console.log('=====================================================================');
    console.log('www start: ', ip + ':' + port);
    console.log('www get config: ', config);
    
    /**
     * Create HTTP server.
     */
    server = http.createServer(app, ip);
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, ip);
    server.on('error', onError);
    server.on('listening', onListening);
    /**
     * Normalize a port into a number, string, or false.
     */
    function normalizePort(val) {
        let port = parseInt(val, 10);
        if (isNaN(port)) {
            // named pipe
            return val;
        }
        if (port >= 0) {
            // port number
            return port;
        }
        return false;
    }
    /**
     * Event listener for HTTP server "error" event.
     */
    function onError(error) {
        console.log('www start error');
        console.log('=====================================================================');
        if (error.syscall !== 'listen') {
            throw error;
        }
        let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
    /**
     * Event listener for HTTP server "listening" event.
     */
    function onListening() {
        console.log('www start success');
        console.log('=====================================================================');
        let addr = server.address();
        let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}).fail(err => {
    console.log('www start error: ', err);
});